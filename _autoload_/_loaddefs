;;; _loaddefs --- automatically extracted autoloads
;;
;;; Code:


;;;### (autoloads (my-auto-pair) "auto-pair_" "auto-pair_.el" (20217
;;;;;;  52226))
;;; Generated autoloads from auto-pair_.el

(autoload 'my-auto-pair "auto-pair_" "\


\(fn)" t nil)

;;;***

;;;### (autoloads (my-clean-buffer substring-buffer-name) "buffer_"
;;;;;;  "buffer_.el" (20218 39001))
;;; Generated autoloads from buffer_.el

(autoload 'substring-buffer-name "buffer_" "\
使用 substring 截取文件名时，在 buffer-name 后面加几个字符，防止文件名过短引发错误。m n 参数同`substring'的 from to，可选参数 x 存在时截取带路径的文件名。

\(fn M N &optional X)" nil nil)

(defvar my-clean-buffers-names '("\\*Completions" "\\*Compile-Log" "\\*.*[Oo]utput\\*$" "\\*grep" "\\*magit" "\\*Kill" "\\*Apropos" "\\*compilation" "\\*Customize" "\\*Calc" "\\keywiz-scores" "\\*BBDB\\*" "\\*trace of SMTP" "\\*vc" "\\*cvs" "\\*keywiz" "\\*WoMan-Log" "\\*tramp" "\\*desktop\\*") "\
List of regexps matching names of buffers to kill.")

(defvar my-clean-buffers-modes '(help-mode) "\
List of modes whose buffers will be killed.")

(autoload 'my-clean-buffer "buffer_" "\
Kill buffers as per `my-clean-buffer-list' and `my-clean-buffer-modes'.

\(fn)" t nil)

;;;***

;;;### (autoloads (rename-file-specify-extension) "dired_" "dired_.el"
;;;;;;  (20217 52226))
;;; Generated autoloads from dired_.el

(autoload 'rename-file-specify-extension "dired_" "\


\(fn)" t nil)

;;;***

;;;### (autoloads (parallel-edit outside resize-horizontal-space
;;;;;;  swap-point) "edit_" "edit_.el" (20218 40184))
;;; Generated autoloads from edit_.el

(autoload 'swap-point "edit_" "\


\(fn)" t nil)

(autoload 'resize-horizontal-space "edit_" "\


\(fn &optional BACKWARD-ONLY)" t nil)

(autoload 'outside "edit_" "\
up list N level, append PRE ahead and SUF behind, backward M char

\(fn O B S)" nil (quote macro))

(autoload 'parallel-edit "edit_" "\


\(fn POSITION-LIST &optional PRT)" t nil)

;;;***

;;;### (autoloads (run-current-file-macro write-temp find-temp) "file_"
;;;;;;  "file_.el" (20218 31501))
;;; Generated autoloads from file_.el

(autoload 'find-temp "file_" "\


\(fn &optional SUFFIX)" t nil)

(autoload 'write-temp "file_" "\


\(fn FILENAME &optional CONFIRM)" t nil)

(autoload 'run-current-file-macro "file_" "\
Execute or compile the current file.
For example, if the current buffer is the file x.pl,
then it'll call “perl x.pl” in a shell.
The file can be php, perl, python, bash, java.
File suffix is used to determine what program to run.

\(fn OUTPUTF)" nil (quote macro))

;;;***

;;;### (autoloads (temp-func-call temp-func-add) "function_" "function_.el"
;;;;;;  (20217 52226))
;;; Generated autoloads from function_.el

(defvar temp-func-list '((let ((cnt 0) (acc nil)) (mapc (lambda (x) (setq acc (concat acc "\n" (number-to-string (setq cnt (1+ cnt))) ": " (prin1-to-string x)))) (butlast temp-func-list)) acc)))

(autoload 'temp-func-add "function_" "\


\(fn &optional BEG END)" t nil)

(autoload 'temp-func-call "function_" "\


\(fn &optional N)" t nil)

;;;***

;;;### (autoloads (list-hash build-hash-table cons2hash) "hash_"
;;;;;;  "hash_.el" (20217 52226))
;;; Generated autoloads from hash_.el

(autoload 'cons2hash "hash_" "\


\(fn LST)" nil nil)

(autoload 'build-hash-table "hash_" "\


\(fn &rest LST)" nil nil)

(autoload 'list-hash "hash_" "\


\(fn HASH-TABLE &optional WITH-VALUE)" nil nil)

;;;***

;;;### (autoloads (insert-doc-head insert-time insert-autoload-magic-comment)
;;;;;;  "insert_" "insert_.el" (20218 29614))
;;; Generated autoloads from insert_.el

(autoload 'insert-autoload-magic-comment "insert_" "\


\(fn)" t nil)

(autoload 'insert-time "insert_" "\


\(fn &optional FORMAT)" t nil)

(autoload 'insert-doc-head "insert_" "\


\(fn)" t nil)

;;;***

;;;### (autoloads (add-to-list-p add-to-list-l add-to-list-x merge-lists
;;;;;;  zip-lists cons-list-l) "list_" "list_.el" (20217 52226))
;;; Generated autoloads from list_.el

(autoload 'cons-list-l "list_" "\
(cons-list-l '(1 2 3 4 5 6)) => ((1 . 2) (3 . 4) (5 . 6))

\(fn LST)" nil nil)

(autoload 'zip-lists "list_" "\
(zip-lists '(1 3 5) '(2 4 6)) => ((1 . 2) (3 . 4) (5 . 6))

\(fn A B)" nil nil)

(autoload 'merge-lists "list_" "\
(merge-lists '(1 2) '(3 4) '(5 6)) => ((1 3 5) (2 4 6))

\(fn &rest LISTS)" nil nil)

(autoload 'add-to-list-x "list_" "\
See also `add-to-list-l' `add-to-list-p'

\(add-to-list-x 'load-path
               init-dir
               (expand-file-name \"_misc/\" init-dir)
               )

\(fn LIST-VAR &rest REST)" nil nil)

(autoload 'add-to-list-l "list_" "\
See also `add-to-list-x'

\(fn LIST-VAR LIST)" nil nil)

(autoload 'add-to-list-p "list_" "\
See also `add-to-list-x'

\(fn LIST-VAR &optional BASE &rest REST)" nil nil)

;;;***

;;;### (autoloads (shell-command-symbol-to-string join-string) "string_"
;;;;;;  "string_.el" (20217 52683))
;;; Generated autoloads from string_.el

(autoload 'join-string "string_" "\
(mapconcat 'concat lst s)

\(fn LST S)" nil nil)

(autoload 'shell-command-symbol-to-string "string_" "\


\(fn &rest S)" nil (quote macro))

(defalias 'ss 'shell-command-symbol-to-string)

;;;***

;;;### (autoloads (test-times test-list eval-buffer-time mklst) "test_"
;;;;;;  "test_.el" (20217 52226))
;;; Generated autoloads from test_.el

(autoload 'mklst "test_" "\
创建大小为 n 的字符串列表

\(fn N)" nil nil)

(autoload 'eval-buffer-time "test_" "\


\(fn)" t nil)

(autoload 'test-list "test_" "\
用大小为 n 的字符串列表，测试函数 fn (fn 最后一个参数为列表)

\(fn N &rest FN)" nil (quote macro))

(autoload 'test-times "test_" "\
计算 body 运行 n 次所需时间

\(fn N &rest BODY)" nil (quote macro))

;;;***

;;;### (autoloads (wordpress) "wordpress_" "wordpress_.el" (20217
;;;;;;  52226))
;;; Generated autoloads from wordpress_.el

(autoload 'wordpress "wordpress_" "\


\(fn BEG END)" t nil)

;;;***

(provide '_loaddefs)
;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; coding: utf-8
;; End:
;;; _loaddefs ends here
